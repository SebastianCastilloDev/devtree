Índice de archivos:

1. .env
2. .gitignore
3. package.json
4. src/config/db.ts
5. src/handlers/index.ts
6. src/index.ts
7. src/models/User.ts
8. src/router.ts
9. src/server.ts
10. src/utils/auth.ts
11. tsconfig.json



--------------------
.env
--------------------


MONGO_URI=mongodb+srv://tantrum5535:g2O407rfVvJqF63J@cluster0.z2y73.mongodb.net/devtree


--------------------
.gitignore
--------------------

.env 
node_modules/
package-lock.json
.DS_Store
dist


--------------------
package.json
--------------------

{
  "name": "devtree",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "nodemon src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "colors": "^1.4.0",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "mongoose": "^8.8.2",
    "slug": "^10.0.0"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/express": "^5.0.0",
    "@types/slug": "^5.0.9",
    "inquirer": "^8.2.4",
    "nodemon": "^3.1.7",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.2"
  }
}



--------------------
src/config/db.ts
--------------------

import mongoose from "mongoose";

export const connectDB = async (): Promise<void>=> {

  const url = process.env.MONGO_URI
  
  try {
    const {connection} = await mongoose.connect(url) 
    const url2 = `${connection.host}:${connection.port}`
    
    console.log(`Mongo db conectado en ${url2}`)
  } catch (error) {
    console.log(error)
    process.exit(1)
  }
}


--------------------
src/handlers/index.ts
--------------------

import { Request, Response } from "express"
import User from "../models/User"
import { hashPassword } from '../utils/auth';
import slug from 'slug'

export const createAccount = async (req: Request, res: Response)=> {

  const {email, password, handle} = req.body

  const userExists = await User.findOne({email})
  if (userExists) {
    const error = new Error('El usuario ya está registrado')
    return res.status(409).json({error: error.message})
  } 

  const user = new User(req.body)
  user.password = await hashPassword(password)

  console.log(slug(handle))
  
  await user.save()
  res.status(201).send('Registro Creado Correctamente')

}




--------------------
src/index.ts
--------------------

import colors from 'colors'
import server from "./server"

const port : number | string = process.env.PORT || 3000

server.listen(port, () => {
    console.log(colors.bgBlue.italic.bold( "Servidor funcionando en el puerto: "), port);
    console.log("http://localhost:3000")
})


--------------------
src/models/User.ts
--------------------

import mongoose, { Schema } from "mongoose";

interface IUser {
  handle: string
  name: string
  email: string
  password: string
}

const userSchema = new Schema({
  handle: {
    type: String,
    required: true,
    trim: true,
    lowercase: true,
    unique: true
  },
  name: {
    type: String,
    required: true,
    trim: true,
  },
  email: {
    type: String,
    required: true,
    trim: true,
    unique: true,
    lowercase: true
  },
  password: {
    type: String,
    required: true,
    trim: true,
  }
})

const User = mongoose.model<IUser>('User', userSchema)
export default User


--------------------
src/router.ts
--------------------

import { Router } from 'express';
import { createAccount } from './handlers/index';

const router = Router();

// Autenticación y registro
router.post('/auth/register', createAccount as any);

export default router;



--------------------
src/server.ts
--------------------

import express from 'express'
import 'dotenv/config'
import router from './router'
import { connectDB } from './config/db'


const app = express()
connectDB()

//leer datos de formularios
app.use(express.json())

app.use('/', router)

export default app


--------------------
src/utils/auth.ts
--------------------

import bcrypt from 'bcrypt'

export const hashPassword = async (password: string) => {
  const salt = await bcrypt.genSalt(10)
  return await bcrypt.hash(password, salt)
  
}


--------------------
tsconfig.json
--------------------

{
    "compilerOptions": {
        "outDir": "./dist",
        "rootDir": "./src",
        "lib": ["ESNext"],
        "target": "ESNext",
        "moduleResolution": "nodenext",
        "module": "NodeNext",
        "strict": false,
        "sourceMap": true,
        "esModuleInterop": true,
        "declaration": true,
        "typeRoots": ["./node_modules/@types"],
        "skipLibCheck": true, // Importante para evitar conflictos de tipos

    },
    "include": ["src/**/*.ts"]
}

